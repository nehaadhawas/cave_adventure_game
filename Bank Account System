class BankAccount:
    # Constructor to initialize account holder's name and balance
    def __init__(self, name, balance=0.0):
        self.name = name
        self.__balance = balance  # Encapsulated balance (private attribute)

    # Method to deposit money
    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            print(f"Deposited: ${amount}")
        else:
            print("Invalid deposit amount")

    # Method to withdraw money
    def withdraw(self, amount):
        if amount > 0 and amount <= self.__balance:
            self.__balance -= amount
            print(f"Withdrew: ${amount}")
        else:
            print("Insufficient balance or invalid withdrawal amount")

    # Method to check balance
    def check_balance(self):
        return f"Current balance: ${self.__balance}"

# Derived class for a special type of account (SavingsAccount)
class SavingsAccount(BankAccount):
    # Constructor for SavingsAccount with an additional interest rate parameter
    def __init__(self, name, balance=0.0, interest_rate=0.01):
        super().__init__(name, balance)
        self.interest_rate = interest_rate

    # Method to apply interest to the balance
    def apply_interest(self):
        interest = self._BankAccount__balance * self.interest_rate
        self.deposit(interest)
        print(f"Interest applied: ${interest}")

# Creating an instance of the base class
account1 = BankAccount("John", 1000)
account1.deposit(500)
account1.withdraw(300)
print(account1.check_balance())

# Creating an instance of the derived class
savings_account = SavingsAccount("Alice", 2000, 0.05)
savings_account.apply_interest()
print(savings_account.check_balance())
